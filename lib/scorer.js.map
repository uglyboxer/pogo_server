{"version":3,"sources":["../src/scorer.js"],"names":[],"mappings":"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","file":"scorer.js","sourcesContent":["import utils from \"./utils\";\nimport Intersection from \"./intersection\";\nimport Region from \"./region\";\nimport EyePoint from \"./eye-point\";\n\nconst boardStateWithoutDeadPoints = function(game) {\n  return game.currentState()._withoutIntersectionsMatching(i => {\n    return game._isDeadAt(i.y, i.x);\n  });\n};\n\nconst boardStateWithoutNeutralPoints = function(boardState) {\n  const regions = Region.allFor(boardState);\n  const neutralRegions = regions.filter(r => r.isNeutral());\n\n  if (regions.length === 0 || neutralRegions.length === 0) {\n    return boardState;\n  }\n\n  const replacements = {};\n\n  neutralRegions.forEach(r => {\n    let startingX = null;\n    let startingY = null;\n\n    r.intersections.forEach(intersection => {\n      startingX = startingX || intersection.x;\n      startingX = startingX || intersection.y;\n\n      const manhattanDistance = Math.abs(intersection.y - startingY) + Math.abs(intersection.x - startingX);\n      const replacementColor = [\"black\", \"white\"][manhattanDistance % 2];\n      const replacement = new Intersection(intersection.y, intersection.x, replacementColor);\n\n      replacements[intersection.y] = replacements[intersection.y] || [];\n      replacements[intersection.y][intersection.x] = replacement;\n    });\n  });\n\n  const newPoints = boardState.intersections.map(i => {\n    if (replacements[i.y] && replacements[i.y][i.x]) {\n      return replacements[i.y][i.x];\n    } else {\n      return i;\n    }\n  });\n\n  return boardState._withNewPoints(newPoints);\n};\n\nconst boardStateWithClearFalseEyesFilled = function(boardState) {\n  const territoryRegions = Region.allFor(boardState).filter(r => r.isTerritory());\n  const falseEyePoints = utils.flatMap(territoryRegions, r => r.intersections).filter(i => (new EyePoint(boardState, i)).isFalse());\n\n  let pointsNeighboringAtari = falseEyePoints.filter(i => {\n    return boardState.neighborsFor(i.y, i.x).some(n => boardState.inAtari(n.y, n.x));\n  });\n  let neutralAtariUpdatedState = boardState;\n\n  while (pointsNeighboringAtari.length > 0) {\n    const newPoints = neutralAtariUpdatedState.intersections.map(i => {\n      if (pointsNeighboringAtari.indexOf(i) > -1) {\n        return new Intersection(i.y, i.x, (new EyePoint(neutralAtariUpdatedState, i)).filledColor());\n      } else {\n        return i;\n      }\n    });\n    neutralAtariUpdatedState = neutralAtariUpdatedState._withNewPoints(newPoints);\n\n    const boardState = boardStateWithoutNeutralPoints(neutralAtariUpdatedState);\n    const territoryRegions = Region.allFor(boardState).filter(r => r.isTerritory());\n    const falseEyePoints = utils.flatMap(territoryRegions, r => r.intersections).filter(i => (new EyePoint(boardState, i)).isFalse());\n\n    pointsNeighboringAtari = falseEyePoints.filter(i => {\n      return neutralAtariUpdatedState.neighborsFor(i.y, i.x).some(n => neutralAtariUpdatedState.inAtari(n.y, n.x));\n    });\n  }\n\n  return neutralAtariUpdatedState;\n};\n\nconst TerritoryScoring = Object.freeze({\n  score: function(game) {\n    const blackDeadAsCaptures = game.deadStones().filter(function(deadPoint) { return game.intersectionAt(deadPoint.y, deadPoint.x).isBlack(); });\n    const whiteDeadAsCaptures = game.deadStones().filter(function(deadPoint) { return game.intersectionAt(deadPoint.y, deadPoint.x).isWhite(); });\n\n    const territory = game.territory();\n    const boardState = game.currentState();\n\n    return {\n      black: territory.black.length + boardState.whiteStonesCaptured + whiteDeadAsCaptures.length,\n      white: territory.white.length + boardState.blackStonesCaptured + blackDeadAsCaptures.length\n    };\n  },\n\n  territory: function(game) {\n    const stateWithoutDeadPoints = boardStateWithoutDeadPoints(game);\n    const stateWithoutNeutrals = boardStateWithoutNeutralPoints(stateWithoutDeadPoints);\n    const stateWithClearFalseEyesFilled = boardStateWithClearFalseEyesFilled(stateWithoutNeutrals);\n\n    const territoryRegions = Region.allFor(stateWithClearFalseEyesFilled).filter(r => r.isTerritory());\n\n    const territoryRegionsWithoutSeki = territoryRegions.filter(r => {\n      const merged = Region.merge(territoryRegions, r);\n      const eyeCounts = merged.map(m => Math.ceil(m.numberOfEyes()));\n\n      return eyeCounts.length > 0 && eyeCounts.reduce((a, b) => a + b) >= 2;\n    });\n\n    const blackRegions = territoryRegionsWithoutSeki.filter(r => r.isBlack());\n    const whiteRegions = territoryRegionsWithoutSeki.filter(r => r.isWhite());\n\n    return {\n      black: utils.flatMap(blackRegions, r => r.intersections).map(i => ({ y: i.y, x: i.x })),\n      white: utils.flatMap(whiteRegions, r => r.intersections).map(i => ({ y: i.y, x: i.x }))\n    };\n  }\n});\n\nconst AreaScoring = Object.freeze({\n  score: function(game) {\n    const blackStonesOnTheBoard = game.intersections().filter(function(intersection) { return intersection.isBlack() && !game._isDeadAt(intersection.y, intersection.x); });\n    const whiteStonesOnTheBoard = game.intersections().filter(function(intersection) { return intersection.isWhite() && !game._isDeadAt(intersection.y, intersection.x); });\n    const territory = game.territory();\n\n    return {\n      black: territory.black.length + blackStonesOnTheBoard.length,\n      white: territory.white.length + whiteStonesOnTheBoard.length\n    };\n  },\n\n  territory: function(game) {\n    const regions = Region.allFor(boardStateWithoutDeadPoints(game));\n    const territoryRegions = regions.filter(r => r.isTerritory());\n    const blackRegions = territoryRegions.filter(r => r.isBlack());\n    const whiteRegions = territoryRegions.filter(r => r.isWhite());\n\n    return {\n      black: utils.flatMap(blackRegions, r => r.intersections).map(i => ({ y: i.y, x: i.x })),\n      white: utils.flatMap(whiteRegions, r => r.intersections).map(i => ({ y: i.y, x: i.x }))\n    };\n  }\n});\n\nconst Scorer = function({ scoreBy, komi } = {}) {\n  this._strategy = {\n    \"area\": AreaScoring,\n    \"territory\": TerritoryScoring,\n    \"equivalence\": AreaScoring\n  }[scoreBy];\n\n  this._komi = komi;\n\n  if (!this._strategy) {\n    throw new Error(\"Unknown scoring type: \" + scoreBy);\n  }\n\n  if (this._komi === null || typeof this._komi === \"undefined\") {\n    throw new Error(\"Error initializing scorer without a komi value\");\n  }\n\n  if (typeof this._komi !== \"number\") {\n    throw new Error(\"Komi value given is not a number: \" + komi);\n  }\n\n  this._usePassStones = scoreBy === \"equivalence\";\n\n  Object.freeze(this);\n};\n\n\nScorer.prototype = {\n  score: function(game) {\n    const result = this._strategy.score(game);\n    result.white += this._komi;\n\n    if (this._usePassStones) {\n      return {\n        black: result.black + game.currentState().whitePassStones,\n        white: result.white + game.currentState().blackPassStones\n      };\n    } else {\n      return result;\n    }\n  },\n\n  territory: function(game) {\n    return this._strategy.territory(game);\n  },\n\n  usingPassStones: function() {\n    return this._usePassStones;\n  }\n};\n\nexport default Scorer;\n"]}