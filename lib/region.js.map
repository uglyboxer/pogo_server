{"version":3,"sources":["../src/region.js"],"names":[],"mappings":"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","file":"region.js","sourcesContent":["import utils from \"./utils\";\n\nconst Region = function(boardState, intersections) {\n  this.boardState = boardState;\n  this.intersections = intersections;\n\n  Object.freeze(this);\n};\n\nRegion._startingAt = function(boardState, y, x) {\n  const startingPoint = boardState.intersectionAt(y, x);\n\n  const [includedPoints, boundaryPoints] = boardState.partitionTraverse(startingPoint, neighbor => {\n    return neighbor.sameColorAs(startingPoint);\n  });\n\n  return [includedPoints, boundaryPoints];\n};\n\nRegion.allFor = function(boardState) {\n  let checkedPoints = [];\n  const regions = [];\n\n  boardState.intersections.forEach(point => {\n    if (checkedPoints.indexOf(point) > -1) {\n      // do nothing\n    } else {\n      const [regionPoints, _] = boardState.partitionTraverse(point, neighbor => {\n        return neighbor.sameColorAs(point);\n      });\n\n      regions.push(new Region(boardState, regionPoints));\n      checkedPoints = checkedPoints.concat(regionPoints);\n    }\n  });\n\n  return regions;\n};\n\nRegion.merge = function(regions, region) {\n  let mergedRegions = [region];\n  let length = -1;\n\n  while (mergedRegions.length !== length) {\n    length = mergedRegions.length;\n\n    mergedRegions = regions.filter(r => {\n      return r.isEmpty() && r.isTerritory() && r.territoryColor() === region.territoryColor() && r.expandedBoundaryStones().some(stone => {\n        return mergedRegions.some(latestRegion => {\n          return latestRegion.expandedBoundaryStones().indexOf(stone) > -1;\n        });\n      });\n    });\n  }\n\n  return mergedRegions;\n};\n\nRegion.prototype = {\n  isEmpty: function() {\n    return this.intersections[0].isEmpty();\n  },\n\n  isTerritory: function() {\n    const point = this.intersections[0];\n\n    if (!point.isEmpty()) {\n      return false;\n    }\n\n    const [_, boundaryPoints] = Region._startingAt(this.boardState, point.y, point.x);\n    const surroundingColors = utils.unique(boundaryPoints.map(i => i.value));\n    const isTerritory = surroundingColors.length === 1 && surroundingColors[0] !== \"empty\";\n\n    return isTerritory;\n  },\n\n  territoryColor: function() {\n    const point = this.intersections[0];\n    const [_, boundaryPoints] = Region._startingAt(this.boardState, point.y, point.x);\n    const surroundingColors = utils.unique(boundaryPoints.map(i => i.value));\n    const isTerritory = surroundingColors.length === 1 && surroundingColors[0] !== \"empty\";\n\n    if (!point.isEmpty() || !isTerritory) {\n      throw new Error(\"Attempted to obtain territory color for something that isn't territory, region containing \" + point.y + \",\" + point.x);\n    } else {\n      return surroundingColors[0];\n    }\n  },\n\n  isBlack: function() {\n    return this.territoryColor() === \"black\";\n  },\n\n  isWhite: function() {\n    return this.territoryColor() === \"white\";\n  },\n\n  isNeutral: function() {\n    return !this.intersections[0].isBlack() && !this.intersections[0].isWhite() && !this.isTerritory();\n  },\n\n  exterior: function() {\n    return this.boardState.intersections.filter(i => {\n      return this.intersections.indexOf(i) < 0 && this.boardState.neighborsFor(i.y, i.x).some(neighbor => {\n        return this.intersections.indexOf(neighbor) > -1;\n      });\n    });\n  },\n\n  boundaryStones: function() {\n    if (!this.isEmpty()) {\n      throw new Error(\"Attempted to obtain boundary stones for non-empty region\");\n    }\n\n    return this.exterior().filter(i => !i.sameColorAs(this.intersections[0]));\n  },\n\n  expandedBoundaryStones: function() {\n    const boundaryStones = this.boundaryStones();\n    const regions = Region.allFor(this.boardState).filter(r => r.intersections.some(i => boundaryStones.indexOf(i) > -1));\n\n    return utils.flatMap(regions, r => r.intersections);\n  },\n\n  lengthOfTerritoryBoundary: function() {\n    // count the empty border points to treat the edge of the board itself as points\n    const borderPoints = this.intersections.filter(i => {\n      return i.y === 0 || i.y === this.boardState.boardSize - 1 || i.x === 0 || i.x === this.boardState.boardSize - 1;\n    });\n    const cornerPoints = this.intersections.filter(i => {\n      return i.y % this.boardState.boardSize - 1 === 0 && i.x % this.boardState.boardSize - 1 === 0;\n    });\n\n    return this.boundaryStones().length + borderPoints.length + cornerPoints.length;\n  },\n\n  containsSquareFour: function() {\n    return this.intersections.some(i => {\n      return [\n        [0, 0], [0, 1],\n        [1, 0], [1, 1]\n      ].every(([y, x]) => {\n        const intersection = this.boardState.intersectionAt(i.y + y, i.x + x);\n        return typeof intersection !== \"undefined\" && intersection.sameColorAs(i);\n      });\n    });\n  },\n\n  containsCurvedFour: function() {\n    return this.intersections.some(i => {\n      return [\n        [\n          [0, 0],\n          [1, 0],\n          [2, 0], [2, 1]\n        ],\n        [\n                         [-1, 2],\n          [0, 0], [0, 1], [0, 2]\n        ],\n        [\n          [0, 0], [0, 1],\n                  [1, 1],\n                  [2, 1]\n        ],\n        [\n          [-1, 0], [-1, 1], [-1, 2],\n          [0, 0]\n        ],\n        [\n                 [-2, 1],\n                 [-1, 1],\n          [0, 0], [0, 1]\n        ],\n        [\n          [0, 0],\n          [1, 0], [1, 1], [1, 2]\n        ],\n        [\n          [0, -1], [0, 0],\n          [1, -1],\n          [2, -1]\n        ],\n        [\n          [-1, -2], [-1, -1], [-1, 0],\n                              [0, 0]\n        ]\n      ].some(expectedPoints => {\n        return expectedPoints.every(([y, x]) => {\n          const intersection = this.boardState.intersectionAt(i.y + y, i.x + x);\n          return typeof intersection !== \"undefined\" && intersection.sameColorAs(i);\n        });\n      });\n    });\n  },\n\n  numberOfEyes: function() {\n    if (!this.intersections[0].isEmpty()) {\n      throw new Error(\"Unexpected calculation of number of eyes for a non-empty region containing \" + this.intersections[0].y + \",\" + this.intersections[0].x);\n    }\n\n    const boundaryLength = this.lengthOfTerritoryBoundary();\n\n    if (boundaryLength < 2) {\n      throw new Error(\"Unexpected boundary length of \" + boundaryLength + \" for region including \" + this.intersections[0].y + \",\" + this.intersections[0].x);\n    }\n\n    if (boundaryLength >= 10) {\n      return 2;\n    }\n\n    let eyes;\n\n    switch (boundaryLength) {\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n        eyes = 1;\n        break;\n      case 7:\n        eyes = 1.5;\n        break;\n      case 8:\n        if (this.containsSquareFour()) {\n          eyes = 1;\n        } else if (this.containsCurvedFour()) {\n          eyes = 2;\n        } else {\n          eyes = 1.5;\n        }\n\n        break;\n      case 9:\n        if (this.containsSquareFour()) {\n          eyes = 1.5;\n        } else {\n          eyes = 2;\n        }\n        break;\n\n      default:\n        throw new Error(\"unhandled boundary length \" + boundaryLength);\n    }\n\n    return eyes;\n  }\n};\n\nexport default Region;\n"]}