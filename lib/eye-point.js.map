{"version":3,"sources":["../src/eye-point.js"],"names":[],"mappings":";;;;;AAAA,IAAM,WAAW,SAAX,QAAW,CAAS,UAAT,EAAqB,YAArB,EAAmC;AAClD,OAAK,UAAL,GAAkB,UAAlB;AACA,OAAK,YAAL,GAAoB,YAApB;;AAEA,SAAO,MAAP,CAAc,IAAd;AACD,CALD;;AAOA,SAAS,SAAT,GAAqB;AACnB,aAAW,qBAAW;AAAA;;AACpB,QAAM,YAAY,EAAlB;;AAEA,QAAI,YAAY,EAAhB;AACA,QAAI,YAAY,EAAhB;;AAEA,QAAI,KAAK,YAAL,CAAkB,CAAlB,GAAsB,CAA1B,EAA6B;AAC3B,gBAAU,IAAV,CAAe,KAAK,YAAL,CAAkB,CAAlB,GAAsB,CAArC;AACD;;AAED,QAAI,KAAK,YAAL,CAAkB,CAAlB,GAAuB,KAAK,UAAL,CAAgB,SAAhB,GAA4B,CAAvD,EAA2D;AACzD,gBAAU,IAAV,CAAe,KAAK,YAAL,CAAkB,CAAlB,GAAsB,CAArC;AACD;;AAED,QAAI,KAAK,YAAL,CAAkB,CAAlB,GAAsB,CAA1B,EAA6B;AAC3B,gBAAU,IAAV,CAAe,KAAK,YAAL,CAAkB,CAAlB,GAAsB,CAArC;AACD;;AAED,QAAI,KAAK,YAAL,CAAkB,CAAlB,GAAuB,KAAK,UAAL,CAAgB,SAAhB,GAA4B,CAAvD,EAA2D;AACzD,gBAAU,IAAV,CAAe,KAAK,YAAL,CAAkB,CAAlB,GAAsB,CAArC;AACD;;AAED,cAAU,OAAV,CAAkB,aAAK;AACrB,gBAAU,OAAV,CAAkB,aAAK;AACrB,kBAAU,IAAV,CAAe,MAAK,UAAL,CAAgB,cAAhB,CAA+B,CAA/B,EAAkC,CAAlC,CAAf;AACD,OAFD;AAGD,KAJD;;AAMA,WAAO,SAAP;AACD,GA9BkB;;AAgCnB,WAAS,mBAAW;AAClB,QAAI,CAAC,KAAK,YAAL,CAAkB,OAAlB,EAAL,EAAkC;AAChC,aAAO,KAAP;AACD;;AAED,QAAM,YAAY,KAAK,SAAL,EAAlB;AACA,QAAM,cAAc,UAAU,MAAV,IAAoB,CAAxC;;AAEA,QAAM,YAAY,KAAK,SAAL,EAAlB;AACA,QAAM,oBAAoB,UAAU,MAAV,CAAiB;AAAA,aAAK,CAAC,EAAE,OAAF,EAAN;AAAA,KAAjB,CAA1B;;AAEA,QAAI,eAAe,kBAAkB,MAAlB,GAA2B,CAA9C,EAAiD;AAC/C,aAAO,KAAP;AACD;;AAED,QAAI,CAAC,WAAD,IAAgB,kBAAkB,MAAlB,GAA2B,CAA/C,EAAkD;AAChD,aAAO,KAAP;AACD;;AAED,QAAM,4BAA4B,UAAU,MAAV,CAAiB;AAAA,aAAK,CAAC,EAAE,OAAF,EAAD,IAAgB,CAAC,EAAE,WAAF,CAAc,kBAAkB,CAAlB,CAAd,CAAtB;AAAA,KAAjB,CAAlC;;AAEA,QAAI,WAAJ,EAAiB;AACf,aAAO,0BAA0B,MAA1B,IAAoC,CAA3C;AACD,KAFD,MAEO;AACL,aAAO,0BAA0B,MAA1B,IAAoC,CAA3C;AACD;AACF,GA1DkB;;AA4DnB,aAAW,qBAAW;AACpB,WAAO,KAAK,UAAL,CAAgB,YAAhB,CAA6B,KAAK,YAAL,CAAkB,CAA/C,EAAkD,KAAK,YAAL,CAAkB,CAApE,CAAP;AACD,GA9DkB;;AAgEnB,eAAa,uBAAW;AACtB,QAAI,CAAC,KAAK,OAAL,EAAL,EAAqB;AACnB,YAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED,WAAO,KAAK,SAAL,GAAiB,CAAjB,EAAoB,KAA3B;AACD;AAtEkB,CAArB;;kBAyEe,Q","file":"eye-point.js","sourcesContent":["const EyePoint = function(boardState, intersection) {\n  this.boardState = boardState;\n  this.intersection = intersection;\n\n  Object.freeze(this);\n};\n\nEyePoint.prototype = {\n  diagonals: function() {\n    const diagonals = [];\n\n    let possibleX = [];\n    let possibleY = [];\n\n    if (this.intersection.x > 0) {\n      possibleX.push(this.intersection.x - 1);\n    }\n\n    if (this.intersection.x < (this.boardState.boardSize - 1)) {\n      possibleX.push(this.intersection.x + 1);\n    }\n\n    if (this.intersection.y > 0) {\n      possibleY.push(this.intersection.y - 1);\n    }\n\n    if (this.intersection.y < (this.boardState.boardSize - 1)) {\n      possibleY.push(this.intersection.y + 1);\n    }\n\n    possibleX.forEach(x => {\n      possibleY.forEach(y => {\n        diagonals.push(this.boardState.intersectionAt(y, x));\n      });\n    });\n\n    return diagonals;\n  },\n\n  isFalse: function() {\n    if (!this.intersection.isEmpty()) {\n      return false;\n    }\n\n    const diagonals = this.diagonals();\n    const onFirstLine = diagonals.length <= 2;\n\n    const neighbors = this.neighbors();\n    const occupiedNeighbors = neighbors.filter(i => !i.isEmpty());\n\n    if (onFirstLine && occupiedNeighbors.length < 1) {\n      return false;\n    }\n\n    if (!onFirstLine && occupiedNeighbors.length < 2) {\n      return false;\n    }\n\n    const opposingOccupiedDiagonals = diagonals.filter(d => !d.isEmpty() && !d.sameColorAs(occupiedNeighbors[0]));\n\n    if (onFirstLine) {\n      return opposingOccupiedDiagonals.length >= 1;\n    } else {\n      return opposingOccupiedDiagonals.length >= 2;\n    }\n  },\n\n  neighbors: function() {\n    return this.boardState.neighborsFor(this.intersection.y, this.intersection.x);\n  },\n\n  filledColor: function() {\n    if (!this.isFalse()) {\n      throw new Error(\"Attempting to find filled color for a non-false eye\");\n    }\n\n    return this.neighbors()[0].value;\n  }\n};\n\nexport default EyePoint;\n"]}