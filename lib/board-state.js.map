{"version":3,"sources":["../src/board-state.js"],"names":[],"mappings":"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","file":"board-state.js","sourcesContent":["import utils from \"./utils\";\nimport Intersection from \"./intersection\";\nimport Zobrist from \"./zobrist\";\n\nconst BoardState = function({ moveNumber, playedPoint, color, pass, blackPassStones, whitePassStones, intersections, blackStonesCaptured, whiteStonesCaptured, capturedPositions, koPoint, boardSize }) {\n  this.moveNumber = moveNumber;\n  this.playedPoint = playedPoint;\n  this.color = color;\n  this.pass = pass;\n  this.blackPassStones = blackPassStones;\n  this.whitePassStones = whitePassStones;\n  this.intersections = intersections;\n  this.blackStonesCaptured = blackStonesCaptured;\n  this.whiteStonesCaptured = whiteStonesCaptured;\n  this.capturedPositions = capturedPositions;\n  this.koPoint = koPoint;\n  this.boardSize = boardSize;\n  this._positionHash = Zobrist.hash(boardSize, intersections);\n\n  Object.freeze(this);\n};\n\nBoardState.prototype = {\n  _capturesFrom: function(y, x, color) {\n    const capturedNeighbors = this.neighborsFor(y, x).filter(neighbor => {\n      // TODO: this value of 1 is potentially weird.\n      // we're checking against the move before the stone we just played\n      // where this space is not occupied yet. things should possibly be\n      // reworked.\n      return !neighbor.isEmpty() && neighbor.value !== color && this.libertiesAt(neighbor.y, neighbor.x) === 1;\n    });\n\n    const capturedStones = utils.flatMap(capturedNeighbors, neighbor => this.groupAt(neighbor.y, neighbor.x));\n\n    return utils.unique(capturedStones);\n  },\n\n  _updateIntersection: function(intersection, intersections, color) {\n    return intersections.map(i => {\n      if (i.y === intersection.y && i.x === intersection.x) {\n        return new Intersection(i.y, i.x, color);\n      } else {\n        return i;\n      }\n    });\n  },\n\n  _removeIntersection: function(intersection, intersections) {\n    return this._updateIntersection(intersection, intersections, \"empty\");\n  },\n\n  _withoutIntersectionsMatching: function(condition) {\n    const newPoints = this.intersections.map(i => {\n      if (condition(i)) {\n        return new Intersection(i.y, i.x, \"empty\");\n      } else {\n        return i;\n      }\n    });\n\n    return this._withNewPoints(newPoints);\n  },\n\n  _withNewPoints: function(newPoints) {\n    const newState = new BoardState({\n      moveNumber: this.moveNumber,\n      playedPoint: this.playedPoint,\n      color: this.color,\n      pass: this.pass,\n      blackPassStones: this.blackPassStones,\n      whitePassStones: this.whitePassStones,\n      intersections: newPoints,\n      blackStonesCaptured: this.blackStonesCaptured,\n      whiteStonesCaptured: this.whiteStonesCaptured,\n      capturedPositions: this.capturedPositions,\n      koPoint: this.koPoint,\n      boardSize: this.boardSize\n    });\n\n    return newState;\n  },\n\n  yCoordinateFor: function(y) {\n    return this.boardSize - y;\n  },\n\n  xCoordinateFor: function(x) {\n    const letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\"];\n\n    return letters[x];\n  },\n\n  playPass: function(color) {\n    const stateInfo = {\n      moveNumber: this.moveNumber + 1,\n      playedPoint: null,\n      color: color,\n      pass: true,\n      blackPassStones: this.blackPassStones,\n      whitePassStones: this.whitePassStones,\n      intersections: this.intersections,\n      blackStonesCaptured: this.blackStonesCaptured,\n      whiteStonesCaptured: this.whiteStonesCaptured,\n      capturedPositions: [],\n      koPoint: null,\n      boardSize: this.boardSize\n    };\n\n    stateInfo[color + \"PassStones\"] += 1;\n\n    const newState = new BoardState(stateInfo);\n\n    return newState;\n  },\n\n  playAt: function(y, x, playedColor) {\n    const capturedPositions = this._capturesFrom(y, x, playedColor);\n    let playedPoint = this.intersectionAt(y, x);\n    let newPoints = this.intersections;\n\n    capturedPositions.forEach(i => {\n      newPoints = this._removeIntersection(i, newPoints);\n    });\n\n    newPoints = this._updateIntersection(playedPoint, newPoints, playedColor);\n\n    const newTotalBlackCaptured = this.blackStonesCaptured + (playedColor === \"black\" ? 0 : capturedPositions.length);\n    const newTotalWhiteCaptured = this.whiteStonesCaptured + (playedColor === \"white\" ? 0 : capturedPositions.length);\n\n    const boardSize = this.boardSize;\n\n    const moveInfo = {\n      moveNumber: this.moveNumber + 1,\n      playedPoint: playedPoint,\n      color: playedColor,\n      pass: false,\n      blackPassStones: this.blackPassStones,\n      whitePassStones: this.whitePassStones,\n      intersections: newPoints,\n      blackStonesCaptured: newTotalBlackCaptured,\n      whiteStonesCaptured: newTotalWhiteCaptured,\n      capturedPositions: capturedPositions,\n      boardSize: boardSize\n    };\n\n    const withPlayedPoint = new BoardState(moveInfo);\n    const hasKoPoint = capturedPositions.length === 1 && withPlayedPoint.groupAt(y, x).length === 1 && withPlayedPoint.inAtari(y, x);\n\n    if (hasKoPoint) {\n      moveInfo[\"koPoint\"] = { y: capturedPositions[0].y, x: capturedPositions[0].x };\n    } else {\n      moveInfo[\"koPoint\"] = null;\n    }\n\n    return new BoardState(moveInfo);\n  },\n\n  intersectionAt: function(y, x) {\n    return this.intersections[y*this.boardSize + x];\n  },\n\n  groupAt: function(y, x) {\n    const startingPoint = this.intersectionAt(y, x);\n\n    const [group, _] = this.partitionTraverse(startingPoint, neighbor => {\n      return neighbor.sameColorAs(startingPoint);\n    });\n\n    return group;\n  },\n\n  libertiesAt: function(y, x) {\n    const point = this.intersectionAt(y, x);\n\n    const emptyPoints = utils.flatMap(this.groupAt(point.y, point.x), groupPoint => {\n      return this.neighborsFor(groupPoint.y, groupPoint.x).filter(intersection => intersection.isEmpty());\n    });\n\n    return utils.unique(emptyPoints).length;\n  },\n\n  inAtari: function(y, x) {\n    return this.libertiesAt(y, x) === 1;\n  },\n\n  neighborsFor: function(y, x) {\n    const neighbors = [];\n\n    if (x > 0) {\n      neighbors.push(this.intersectionAt(y, x - 1));\n    }\n\n    if (x < (this.boardSize - 1)) {\n      neighbors.push(this.intersectionAt(y, x + 1));\n    }\n\n    if (y > 0) {\n      neighbors.push(this.intersectionAt(y - 1, x));\n    }\n\n    if (y < (this.boardSize - 1)) {\n      neighbors.push(this.intersectionAt(y + 1, x));\n    }\n\n    return neighbors;\n  },\n\n  positionSameAs: function(otherState) {\n    return this._positionHash === otherState._positionHash && this.intersections.every(point => {\n      return point.sameColorAs(otherState.intersectionAt(point.y, point.x));\n    });\n  },\n\n  // Iterative depth-first search traversal. Start from\n  // startingPoint, iteratively follow all neighbors.\n  // If inclusionConditionis met for a neighbor, include it\n  // otherwise, exclude it. At the end, return two arrays:\n  // One for the included neighbors, another for the remaining neighbors.\n  partitionTraverse: function(startingPoint, inclusionCondition) {\n    let checkedPoints = [];\n    let boundaryPoints = [];\n    let pointsToCheck = [];\n\n    pointsToCheck.push(startingPoint);\n\n    while (pointsToCheck.length > 0) {\n      const point = pointsToCheck.pop();\n\n      if (checkedPoints.indexOf(point) > -1) {\n        // skip it, we already checked\n      } else {\n        checkedPoints.push(point);\n\n        this.neighborsFor(point.y, point.x).forEach(neighbor => {\n          if (checkedPoints.indexOf(neighbor) > -1) {\n            // skip this neighbor, we already checked it\n          } else {\n            if (inclusionCondition(neighbor)) {\n              pointsToCheck.push(neighbor);\n            } else {\n              boundaryPoints.push(neighbor);\n            }\n          }\n        });\n      }\n    }\n\n    return [checkedPoints, utils.unique(boundaryPoints)];\n  }\n};\n\nBoardState._initialFor = function(boardSize, handicapStones) {\n  this._cache = this._cache || {};\n  this._cache[boardSize] = this._cache[boardSize] || {};\n\n  if (this._cache[boardSize][handicapStones]) {\n    return this._cache[boardSize][handicapStones];\n  }\n\n  let emptyPoints = Array.apply(null, Array(boardSize * boardSize));\n  emptyPoints = emptyPoints.map((x, i) => {\n    return new Intersection(Math.floor(i / boardSize), i % boardSize);\n  });\n\n  const hoshiOffset = boardSize > 11 ? 3 : 2;\n  const hoshiPoints = {\n    topRight:     { y: hoshiOffset,                 x: boardSize - hoshiOffset - 1 },\n    bottomLeft:   { y: boardSize - hoshiOffset - 1, x: hoshiOffset },\n    bottomRight:  { y: boardSize - hoshiOffset - 1, x: boardSize - hoshiOffset - 1 },\n    topLeft:      { y: hoshiOffset,                 x: hoshiOffset },\n    middle:       { y: (boardSize + 1)/2 - 1,       x: (boardSize + 1)/2 - 1 },\n    middleLeft:   { y: (boardSize + 1)/2 - 1,       x: hoshiOffset },\n    middleRight:  { y: (boardSize + 1)/2 - 1,       x: boardSize - hoshiOffset - 1 },\n    middleTop:    { y: hoshiOffset,                 x: (boardSize + 1)/2 - 1 },\n    middleBottom: { y: boardSize - hoshiOffset - 1, x: (boardSize + 1)/2 - 1 }\n  };\n  const handicapPlacements = {\n    0: [],\n    1: [],\n    2: [hoshiPoints.topRight, hoshiPoints.bottomLeft],\n    3: [hoshiPoints.topRight, hoshiPoints.bottomLeft, hoshiPoints.bottomRight],\n    4: [hoshiPoints.topRight, hoshiPoints.bottomLeft, hoshiPoints.bottomRight, hoshiPoints.topLeft],\n    5: [hoshiPoints.topRight, hoshiPoints.bottomLeft, hoshiPoints.bottomRight, hoshiPoints.topLeft, hoshiPoints.middle],\n    6: [hoshiPoints.topRight, hoshiPoints.bottomLeft, hoshiPoints.bottomRight, hoshiPoints.topLeft, hoshiPoints.middleLeft, hoshiPoints.middleRight],\n    7: [hoshiPoints.topRight, hoshiPoints.bottomLeft, hoshiPoints.bottomRight, hoshiPoints.topLeft, hoshiPoints.middleLeft, hoshiPoints.middleRight, hoshiPoints.middle],\n    8: [hoshiPoints.topRight, hoshiPoints.bottomLeft, hoshiPoints.bottomRight, hoshiPoints.topLeft, hoshiPoints.middleLeft, hoshiPoints.middleRight, hoshiPoints.middleTop, hoshiPoints.middleBottom],\n    9: [hoshiPoints.topRight, hoshiPoints.bottomLeft, hoshiPoints.bottomRight, hoshiPoints.topLeft, hoshiPoints.middleLeft, hoshiPoints.middleRight, hoshiPoints.middleTop, hoshiPoints.middleBottom, hoshiPoints.middle]\n  };\n\n  handicapPlacements[handicapStones].forEach(p => {\n    emptyPoints[p.y*boardSize + p.x] = new Intersection(p.y, p.x, \"black\");\n  });\n\n  const initialState = new BoardState({\n    color: handicapStones > 1 ? \"black\" : \"white\",\n    moveNumber: 0,\n    intersections: Object.freeze(emptyPoints),\n    blackStonesCaptured: 0,\n    whiteStonesCaptured: 0,\n    whitePassStones: 0,\n    blackPassStones: 0,\n    boardSize: boardSize\n  });\n\n  this._cache[boardSize][handicapStones] = initialState;\n  return initialState;\n};\n\nexport default BoardState;\n"]}